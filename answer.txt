============================== 
 Что такое принцип единой ответственности?
 Какие два правила ты изучил в уроке? Опиши их.
 В чем суть курса?
==============================

1. Принцип единой ответственности заключается в следующем. У нас каждая единица, будь то функция, файл или что то еще - должна выполнять только то, для чего она предназначена и выполнять что то одно.
Пример из реальной жизни. Кассир в супермаркете отвечает только за то, что проводить операции с расчетом клиента, но не как с транспортировкой или заказом новых товаров. За это отвечают другие "единицы" супермаркета - водитель, грузчик, менеджер и т.к
В свою очередь этот подход в программирование означает, что функция для работы с базой данных - не должна валидировать поле формы, она за это не должна переживать, ей уже пришел правильный параметр, потому что другая функция - функция валидации проверила инпут.

2.
2.1. Изначально сделать так что бы просто работало - такая себе MVP версия. А уже потом делать рефакторинг кода.
2.2. Называть все человеко-понятным языком. Язык программирования написан не для машин, а для человека в первую очередь. Что бы он сам понимал что пишет и затем другие люди понимали что он хотел сказать этим кодом. Не создавать сложные загадки, на которые нужно тратить время, что бы понять ЧТО делает. Сюда скорее всего можно отнести понятия Декларативного подхода, когда понятно ЧТО ты делаешь, а не как ты это делаешь.

3. Написав "MVP" код, наше приложение в принципе решает поставленную перед нами задачу. И на протяжении всего курса его "визуальная часть" не будет меняться или скорее визуальный результат, но вот то КАК это сделано на уровне архитектуры будет преображаться или улучшаться, одним словом, рефакторится каждое видео.
Суть в том что бы сделать такого монстра, которого можно будет допиливать и вносить новый функционал как можно удобнее, быстрее и комфортно.


==============================

==============================


1. Профессионализм программиста Не исчисляется:
- Количеством языков и языковых конструкций, синтаксиса которых он знает.
- Количеством строк написанного кода в проекте.
- Сложностью написанного кода (не читабельностью)
- Исчисляется
- Правильным мышлением и подходом к проектированию и решению задачи, а именно умению писать код, который показывает ЧТО он делает, а не КАК.
- Умение дописывать новые фичи, делая это безболезненно.
- Пониманием сути проблемы, а не только ее поверхность. Видеть на уровень ниже, быть более проницательным, даже казалось бы в простых и обыденных ситуациях и задачах.

2. Когда в коде нет загадок и для тебя и для другого человека вполне понятно что ты тут делаешь, а не как.
К примеру есть PDO, которое предоставляет API для работы с базой данными. И я знаю что такой то метод сделает то то и вернет мне то то. Но то как он это делает мне не то что бы не важно, мне не нужно знать как он это делает. Важнее понимать что делает тот или другой метод.

3. PDO это API для работы с БД. В частности мы можем выполнять запросы. В целом важно понимать как работает БД, тогда не сложно понять какие задачи выполняет PDO.
Мы использовали методы которые подготавливали и выполняли запросы, а также возвращали данные, предварительно мы могли указать в каком виде нам эти данные нужны, но только в рамках того представления которые дает PDO. Я имею ввиду, что если результат выполнения fetchAll есть массив, то мы можем указать в каком "стиле" вернуть этот массив, но не можем параметром указать, что это был не массив, а к примеру строка. Конечно мы потом можем переделать массив в строку, но это уже после того как получили массив.



==============================
Напиши свои ответы на вопросы:

  Что такое статичный метод и чем он отличается от обычного?
  Мы уже выполнили много работы, но результат один и тот же: как выводился список постов, так и выводится. Как ты думаешь, в чем тогда выгода?
==============================
1. Статичный метод можно вызвать без создания объекта.

2. Потому что теперь код - не сплошной монолит. Теперь части этого кода совсем не сложно перенести в другой проект и интегрировать их в новый проект. Мы делаем все более независимыми компоненты и идем к принципу единой ответственности. И поэтому нам намного проще тестировать каждый компонент, зная что он не влечет за собой побочных эффектов. Такой код проще читать и понимать.





==============================
Напиши свои ответы на вопросы:

 Для кого нужен синтаксис?
 Что такое модификаторы доступа?
==============================
1. Синтаксис яп - это набор правил для того чтобы описывать программу. Нужно для того чтобы ты человек понимал что он пишет, а машина понимала что человек хочет от машины.

2. Модификаторы доступа - это область видимости или доступа к свойствами и методам класса. То есть в каком контексте данное свойство или метод будет доступен.



==============================
Напиши свои ответы на вопросы:

 За что отвечает функция header()?
 Что такое универсальный код? 
 Почему мы проделали столько работы лишь для того, чтобы сохранить данные в таблицу?
 Что нового о мышлении ты понял после этого урока? 
 Почему в программировании тяжело отличить задачу от инструмента?
==============================
1 Функция header отвечает за редирект. То есть за автоматическое пере направление по указанному пути. Например возврат на главную страницу сайта.

2. Универсальный код это код который мы можем использовать несколько раз. В уроке приведен очень хороший пример вызова функции отвечающей за вывод данных из таблицы. Нам не важно, как это работает внутри, мы просто указываем название таблицы из которой хотим получить данные и этого достаточно.

3. Потому что мы фактически создавали универсальный инструмент по добавлению записи в таблицу нашей базы данных. Универсальность заключается в не зависимости от количества полей таблицы, все данные в функции меняются динамически.

4. После данного урока важно понять следующее:
- Знание синтаксиса важно, но это не далеко не главное;
- Важно мышление единой ответственности;
- Важно мышление разделения;
- Важно мышление делегирования;
- Идея разработки, как разработки инструмента, и применение этих инструментов для решения задач. Есть задача - есть инструмент;
- Ты можешь и должен пользоваться готовым инструментом, для решения своих задач.

5 В программировании тяжело отличить задачу от инструмента по причине того что и задача и инструмент выступает в одном лице - это КОД.



==============================
Напиши свои ответы на вопросы:

 Кто является Пользователем в контексте кода? 
 Зачем нужны глобальные массивы?
==============================
1. Пользователем в контексте кода является сам разработчик. Он пользуется кодом.

2. Глобальные переменные и массивы нужны для того чтобы получить информацию из любого контекста.



==============================
Напиши свои ответы на вопросы:

Если моя цель не в том, чтобы показать как создается функция update, тогда в чем она?
Если мне не нужно знать как работает машина изнутри, тогда что мне нужно знать?
==============================

1. Цель показать, как нужно думать. Цель показать-вызвать чувство дискомфорта, стресса от неправильного мышления, от не правильного подхода к разработке. Показать что разработка инструмента это далеко не главная цель. Цель решить задачу, а не разрабатывать инструмент для ее решения.

2. Нужно знать, как пользоваться этой "машиной". Нужно знать ИНТЕРФЕЙС того как пользоваться "машиной". И тем не менее понимать, как работает тот или иной интерфейс изнутри - это хорошо. Как минимум для собственного развития. Умение наладить инструмент является хорошим тоном. И как мне кажется покажет тебя, с хорошей стороны, как профессионала.




==============================
Напиши свои ответы на вопросы:

Зачем мы создали папку public и перенесли в нее файл index.php?
 В чем основная польза компонента router?
 Что такое MVC?
==============================
1. Папка public и файл index.php является своего рода точкой входа в наше приложение. Единая точка входа делает наше приложение безопасным от внешнего воздействия. Все остальные файлы проекта находятся за пределами данной папки public. Тем самым мы выстраиваем безопасную от внешнего воздействия архитектуру приложения. И никто по средствам браузера не получит доступ к файлам к которым это не предусматривает логика приложения.

2. Польза компонента router заключается в маршрутизации запросов( в выстраивании путей к файлам) нашего приложения. Компонент router позволяет нам четко указать пути к файлам, доступ к которым предусмотрен работой нашего приложения, во всех остальных случаях мы можем вывести красиво оформленную страницу с ошибкой "404".

3. MVC - это идеология архитектуры нашего приложения. Помогает выстраивать уровни взаимодействия компонентов. Разделяет наше приложение на компоненты.




==============================
Напиши свои ответы на вопросы:

 Что такое техническая реализация?
 Что такое смысловая оболочка?
 Что такое "инъекция зависимостей"?
==============================
1. Техническая реализация это код который ВЫПОЛНЯЕТ работу. Читая код Технической Реализации, можно изучить КАК работает функционал.

2. Смысловая оболочка это ответ на вопрос ЧТО делает код.

3. Рассмотрим напримере DI, у нас есть классы А и B, нам нужен функционал класса B в классе А, и мы внедряем зависимость, то есть делаем доступным функционал класса B в классе А, это и есть техническая реализация, а смысловая оболочка, мы делегируем реализацию какой-то функции другому объекту.





==============================
Напиши свои ответы на вопросы:

 Какие есть категории компонентов?
 Почему мне не важно знать внутренность компонентов и то как они работают?
==============================

1. Что касается категорий компонентов. В материале упоминается 2 категории компонентов. 1-я категория - это компоненты необходимые для СОЗДАНИЯ проекта, фундамент своего рода. Например компоненты работы с базой, или компонент для создания так называемого ЧПУ(человекопонятного url) и т.п.
2-я категория - это компоненты самого проекта, то есть компоненты уже ПРИКЛАДНОГО характера в зависимости от области в которой решается задача.

2. Потому что тебе достаточно передать компоненту необходимый параметр и на выходе ты обязательно получишь результат. Как я и писал ранее знание того что "под капотом", у компонента и как это работает полезно для собственного развития, но не является обязательным для решения своей задачи.





==============================
==============================
==============================


Написать компоненты:

1. QueryBuilder - строитель запросов.

2. Router - маршрутизатор входящих URI

3. Validator - валидация входящих данных

4. Flash - основанный на сессиях компонент, для вывода флеш сообщений/уведомлений



Условия реализации:

1. Каждый компонент должен быть реализован в виде отдельного проекта. 
2. Показать как использовать API компонента
3. Написать API документацию к компоненту
4. Расписать пошагово, ход мыслей при разработке компонента
5. Приложить ссылку на гитхаб
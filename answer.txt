============================== 
 Что такое принцип единой ответственности?
 Какие два правила ты изучил в уроке? Опиши их.
 В чем суть курса?
==============================

1. Принцип единой ответственности заключается в следующем. У нас каждая единица, будь то функция, файл или что то еще - должна выполнять только то, для чего она предназначена и выполнять что то одно.
Пример из реальной жизни. Кассир в супермаркете отвечает только за то, что проводить операции с расчетом клиента, но не как с транспортировкой или заказом новых товаров. За это отвечают другие "единицы" супермаркета - водитель, грузчик, менеджер и т.к
В свою очередь этот подход в программирование означает, что функция для работы с базой данных - не должна валидировать поле формы, она за это не должна переживать, ей уже пришел правильный параметр, потому что другая функция - функция валидации проверила инпут.

2.
2.1. Изначально сделать так что бы просто работало - такая себе MVP версия. А уже потом делать рефакторинг кода.
2.2. Называть все человеко-понятным языком. Язык программирования написан не для машин, а для человека в первую очередь. Что бы он сам понимал что пишет и затем другие люди понимали что он хотел сказать этим кодом. Не создавать сложные загадки, на которые нужно тратить время, что бы понять ЧТО делает. Сюда скорее всего можно отнести понятия Декларативного подхода, когда понятно ЧТО ты делаешь, а не как ты это делаешь.

3. Написав "MVP" код, наше приложение в принципе решает поставленную перед нами задачу. И на протяжении всего курса его "визуальная часть" не будет меняться или скорее визуальный результат, но вот то КАК это сделано на уровне архитектуры будет преображаться или улучшаться, одним словом, рефакторится каждое видео.
Суть в том что бы сделать такого монстра, которого можно будет допиливать и вносить новый функционал как можно удобнее, быстрее и комфортно.


==============================

==============================


1. Профессионализм программиста Не исчисляется:
- Количеством языков и языковых конструкций, синтаксиса которых он знает.
- Количеством строк написанного кода в проекте.
- Сложностью написанного кода (не читабельностью)
- Исчисляется
- Правильным мышлением и подходом к проектированию и решению задачи, а именно умению писать код, который показывает ЧТО он делает, а не КАК.
- Умение дописывать новые фичи, делая это безболезненно.
- Пониманием сути проблемы, а не только ее поверхность. Видеть на уровень ниже, быть более проницательным, даже казалось бы в простых и обыденных ситуациях и задачах.

2. Когда в коде нет загадок и для тебя и для другого человека вполне понятно что ты тут делаешь, а не как.
К примеру есть PDO, которое предоставляет API для работы с базой данными. И я знаю что такой то метод сделает то то и вернет мне то то. Но то как он это делает мне не то что бы не важно, мне не нужно знать как он это делает. Важнее понимать что делает тот или другой метод.

3. PDO это API для работы с БД. В частности мы можем выполнять запросы. В целом важно понимать как работает БД, тогда не сложно понять какие задачи выполняет PDO.
Мы использовали методы которые подготавливали и выполняли запросы, а также возвращали данные, предварительно мы могли указать в каком виде нам эти данные нужны, но только в рамках того представления которые дает PDO. Я имею ввиду, что если результат выполнения fetchAll есть массив, то мы можем указать в каком "стиле" вернуть этот массив, но не можем параметром указать, что это был не массив, а к примеру строка. Конечно мы потом можем переделать массив в строку, но это уже после того как получили массив.



==============================
Напиши свои ответы на вопросы:

  Что такое статичный метод и чем он отличается от обычного?
  Мы уже выполнили много работы, но результат один и тот же: как выводился список постов, так и выводится. Как ты думаешь, в чем тогда выгода?
==============================
1) Статичный метод - работает как глобальная константа. При использовании статичного метода НЕ требуется делать лишнее действие, такое как создание экземпляра класса, т.е. нового объекта. Это удобнее и быстрее.
2) Выгода в том что мы исключаем дублирование кода, используя уже написанный код повторно. И при этом делаем код более универсальным, чтобы потом опять использовать его еще где-либо (например в новом проекте). Тем самым экономим свои силы. время и нервы.